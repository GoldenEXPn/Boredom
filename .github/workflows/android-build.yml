name: Android Build & Release

on:
  push:
    tags:
      - 'v*'  # This workflow will run when you push a tag that starts with 'v'
  workflow_dispatch:  # Also allows manual triggering from GitHub UI

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: gradle
        
      - name: Make Gradle executable
        run: chmod +x ScreenTimeDemo/gradlew
        
      # Decode the base64 encoded keystore and write it to a file
      - name: Decode Keystore
        run: |
          echo "${{ secrets.SIGNING_KEY }}" > keystore_base64.txt
          base64 -d keystore_base64.txt > key.jks
        
      # Move the keystore to the correct location
      - name: Move Keystore to Project Directory
        run: |
          cp key.jks ScreenTimeDemo/
      
      # Try to build release APK with the keystore
      - name: Build Release APK
        id: release_build
        continue-on-error: true
        run: cd ScreenTimeDemo && ./gradlew assembleRelease
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
      
      # Build debug APK as fallback if release build fails
      - name: Build Debug APK (Fallback)
        if: steps.release_build.outcome != 'success'
        run: cd ScreenTimeDemo && ./gradlew assembleDebug
      
      # List output directory to verify generated files
      - name: List Output Directory
        run: find ScreenTimeDemo/app/build/outputs -type f -name "*.apk"

      # Create a release with either release or debug APK depending on what was built
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ScreenTimeDemo/app/build/outputs/apk/release/app-release.apk
            ScreenTimeDemo/app/build/outputs/apk/debug/app-debug.apk
          generate_release_notes: true
          draft: false
          prerelease: ${{ steps.release_build.outcome != 'success' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload release APK as artifact if available
      - name: Upload Release APK as artifact
        if: steps.release_build.outcome == 'success' && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ScreenTimeDemo/app/build/outputs/apk/release/app-release.apk
      
      # Upload debug APK as artifact if release build failed
      - name: Upload Debug APK as artifact
        if: steps.release_build.outcome != 'success' && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: ScreenTimeDemo/app/build/outputs/apk/debug/app-debug.apk
